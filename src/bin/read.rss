// https://www.reddit.com/r/rust/comments/d5i74n/accessing_zipped_file/
use std::fs::File;
// use std::fs;
// use tokio::fs::File;

fn doit() -> zip::result::ZipResult<()> {
    use std::io::prelude::*;
    
    // For demonstration purposes we read from an empty buffer.
    // Normally a File object would be used.
    let f = File::open("../../download.zip")?;                //different from example
//     let mut reader = std::io::Cursor::new(f);
    
    let mut zip = zip::ZipArchive::new(f)?;
    
    for i in 0..zip.len()
    {
        let mut file = zip.by_index(i).unwrap();

    //    if i == 0 {
    //        println!("mbvnmbvmnb");
    //        let mut buffer = Vec::new();
    //        file.read_to_end(&mut buffer)
    //        .expect("Something went wrong reading the file");

    //        println!("With text:\n{:?}", buffer);
    //    }

//        let mut buffer = String::new();
//        f.read_to_string(&mut buffer)?;
        println!("Filename: {}", file.name());
        let first_byte = file.bytes().next().unwrap()?;
        println!("{}   !!! PRINT", first_byte);

//        let slice: &[u8] = file.bytes().as_ref();
    }

    Ok(())
}

fn main() {
    doit();
}